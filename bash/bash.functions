# Got at http://www.shell-fu.org/lister.php?id=375
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1  ;;
            *.tar.gz)    tar xvzf $1  ;;
            *.bz2)       bunzip2 $1   ;;
            *.rar)       unrar x $1   ;;
            *.gz)        gunzip $1    ;;
            *.tar)       tar xvf $1   ;;
            *.tbz2)      tar xvjf $1  ;;
            *.tgz)       tar xvzf $1  ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1;;
            *.7z)        7z x $1      ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Make a directory and immediately 'cd' into it
mkcd() {
  mkdir -p "$*"
  cd "$*"
}

# List 256 colours along with is code
function colors(){
  for code in $(seq -w 0 255); do
    for attr in 0 1; do
      printf "%s-%03s %bTest%b\n" "${attr}" "${code}" "\e[${attr};38;05;${code}m" "\e[m"
    done
  done | column -c $((COLUMNS*2))
}

# Resource .bashrc file
function resource(){
  green "Reloading bashrc file"
  . ~/.bashrc
}

# Launch python SimpleHTTPServer
function python_http_server(){
  if [ -z "$1" ]
  then
    python -m SimpleHTTPServer
  else
    python -m SimpleHTTPServer $1
  fi
}

# Search for files
function search_for(){
  local scope="."

  if [ -n "$2" ]; then
    scope=$2
  fi

  find $scope -name "*$1*"
}

# Open conflicted file in editor
function resolve_conflict_in_editor(){
  vim $(git list $1)
}

# Export AWS env variables
function eaws() {
  local profile="default"

  if [ -n "$1" ]; then
    profile=$1
  fi

  echo "Setting AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY env variables ($profile profile)"

  export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id --profile $profile)
  export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key --profile $profile)
}

# Create a tunnel to the production RDS machines
function tunnel_rds() {
  local usage="tunnel_rds 'stargate-env' 'db_shard' ['local_port']"
  local env=$1
  local db_shard=$2
  local shard_config=""
  local rds_host=""
  local rds_password=""
  local datastore_file=""

  if [ "$#" -lt 2 ]; then
    echo "usage: $usage"
  else
    if [[ $env == "production" ]]; then
      datastore_file="$HOME/repos/work/chef-databags-prod/applications/datastores.json"
    fi

    if [[ $env == "staging" ]]; then
      datastore_file="$HOME/repos/work/chef-databags/applications/datastores.json"
    fi

    if [ -f $datastore_file ]; then
      shard_config=$(cat $datastore_file | jq '.'"$env"'.shards."'"$db_shard"'"')
    fi

    if [[ $shard_config == "null" ]]; then
      echo "Error: no rds host for the given shard"
    else
      rds_host=$(echo $shard_config | jq .host)
      rds_password=$(echo $shard_config | jq .password)

      # copy the password to the clipboard (removing double quotes)
      echo $rds_password | tr -d '"' | tr -d '\n' | pbcopy

      local app_server=$(ssh stargate-$env "cat ~/.ssh/config" | grep '^Host all-in' | awk '{print $2}' | gshuf | head -n 1)

      if [ -z "$3" ]; then
        local port=5432
      else
        local port=$3
      fi

      echo "Openning a connection to $rds_host through $app_server"
      echo "RDS host password (copied in the clipboard): $rds_password"
      echo ""
      echo ""

      ssh -L $port:localhost:5432 stargate-$env "ssh -L 5432:$rds_host:5432 $app_server"
    fi
  fi
}

# Log in AWS ECR
function lecr () {
  if [ -z "$AWS_PROFILE" ]; then
    echo "Need to set AWS_PROFILE"
  else
    $(aws ecr get-login --region us-east-1 --no-include-email)
  fi

}

# vim:ft=sh
